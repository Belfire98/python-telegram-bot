from Crypto.Cipher import AES
from Crypto.PublicKey import RSA

# Encrypted private key
private_key = b"""
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,C4A419CEBF7D18FB5E1D98D6DDAEAD5F

...

B5AlxlarcDcMQayWKLj2pWmQm3YVlx5NfoRkSbd14h6ZryzDhG8ZfooLQ5dFh1ba
f8+YbBtvFshzUDYdnr0fS0RYc/WtYmfJdb4+Fkc268BkJzg43rMSrdzaleS6jypU
vzPs8WO0xU1xCIgB92vqZ+/4OlFwjbHHoQlnFHdNPbrfc8INbtLZgLCrELw4UEga
-----END RSA PRIVATE KEY-----
"""

# DEK-Info contains the encryption algorithm (AES-128-CBC) and initialization vector (C4A419CEBF7D18FB5E1D98D6DDAEAD5F)
encryption_algorithm, initialization_vector = private_key.split(b'DEK-Info: ')[1].split(b',', 1)
encryption_algorithm = encryption_algorithm.strip().decode()
initialization_vector = initialization_vector.strip()

# Extract the encrypted private key data
encrypted_private_key = private_key.split(b'PROTECTION ')[1].split(b'-----END RSA PRIVATE KEY-----')[0]

# Decrypt the private key data
decryptor = AES.new(b'your-aes-key', AES.MODE_CBC, initialization_vector)
decrypted_private_key = decryptor.decrypt(encrypted_private_key)

# Remove the padding
decrypted_private_key = decrypted_private_key[:-ord(decrypted_private_key[-1:])]

# Load the decrypted private key
private_key_pem = decrypted_private_key.decode()
private_key = RSA.importKey(private_key_pem)

# Use the private key (e.g. decrypt a message)
message = b' encrypted message ...'
cipher = RSA.importKey(private_key_pem)
decrypted
